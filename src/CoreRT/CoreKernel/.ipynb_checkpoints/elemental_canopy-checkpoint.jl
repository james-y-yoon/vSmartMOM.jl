#=
 
This file contains RT elemental-related functions
 
=#
"Elemental single-scattering layer"
function elemental!(pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray,#{FT2,1}, #Suniti
                            dœÑ::AbstractArray,
                            computed_layer_properties::CoreDirectionalScatteringOpticalProperties,
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::Union{AddedLayer{FT},AddedLayerRS{FT}}, 
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2,M}
    @show "RT elemental Canopy is running!"
    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, j‚ÇÄ‚Å∫, j‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, iŒº‚ÇÄ, wt_ŒºN, qp_ŒºN = quad_points
    @unpack œÑ, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫, G = computed_layer_properties
    
    arr_type = array_type(architecture)
    
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    I‚ÇÄ    = arr_type(pol_type.I‚ÇÄ)
    D     = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))

    device = devi(architecture)
    #@show maximum(Array(œñ)), maximum(Array(dœÑ))
    # If in scattering mode:
    if scatter
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4
 
        # More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
        # with absorption in batch mode, low tau_scatt but higher tau_total, needs exact equations
        kernel! = get_canopy_elem_rt!(device)
        event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, G, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, wct2, ndrange=size(r‚Åª‚Å∫)); 
        #wait(device, event)
        synchronize_if_gpu()
        #@show G
        # SFI part
        kernel! = get_canopy_elem_rt_SFI!(device)
        event = kernel!(j‚ÇÄ‚Å∫, j‚ÇÄ‚Åª, œñ, dœÑ, arr_type(œÑ_sum), G, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, ndoubl, wct02, pol_type.n, I‚ÇÄ, iŒº‚ÇÄ, D, ndrange=size(j‚ÇÄ‚Å∫))
        #wait(device, event)
        synchronize_if_gpu()
        
        # Apply D Matrix
        apply_D_matrix_elemental!(ndoubl, pol_type.n, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)

        # apply D matrix for SFI
        apply_D_matrix_elemental_SFI!(ndoubl, pol_type.n, j‚ÇÄ‚Åª)   
    else
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫ .= Diagonal{exp.(-œÑ*G ./ qp_ŒºN)}
        t‚Åª‚Åª .= Diagonal{exp.(-œÑ*G ./ qp_ŒºN)}
    end    
end

@kernel function get_canopy_elem_rt!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ_Œª, dœÑ_Œª, G, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, wct) 
    n2 = 1
    i, j, n = @index(Global, NTuple) 
    if size(Z‚Åª‚Å∫,3)>1
        n2 = n
    end
    if (wct[j]>1.e-8) 
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º

        r‚Åª‚Å∫[i,j,n] = 
            œñ_Œª[n] *  Z‚Åª‚Å∫[i,j,n2] * 
            (Œº[j] / (Œº[i]*G[j] + Œº[j]*G[i])) * wct[j] * 
            (1 - exp(-dœÑ_Œª[n] * ((G[i] / Œº[i]) + (G[j] / Œº[j]))))
                      
        if (Œº[i] == Œº[j])
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j
                t‚Å∫‚Å∫[i,j,n] = 
                    exp(-dœÑ_Œª[n]*G[i] / Œº[i]) *
                    (1 + œñ_Œª[n]  * Z‚Å∫‚Å∫[i,i,n2] * (dœÑ_Œª[n]  / Œº[i]) * wct[i])
            else
                t‚Å∫‚Å∫[i,j,n] = 0.0
            end
        else
    
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            t‚Å∫‚Å∫[i,j,n] = 
                œñ_Œª[n]  * Z‚Å∫‚Å∫[i,j,n2] * 
                (Œº[j] / (Œº[i]*G[j] - Œº[j]*G[i])) * wct[j] * 
                (exp(-dœÑ_Œª[n] * G[i] / Œº[i]) - exp(-dœÑ_Œª[n] * G[j] / Œº[j]))
                #(exp(-dœÑ_Œª[n] * G[j] / Œº[j]) - exp(-dœÑ_Œª[n] * G[i] / Œº[i]))  
        end
    else
        r‚Åª‚Å∫[i,j,n] = 0.0
        if i==j
            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] * G[i] / Œº[i]) #Suniti
        else
            t‚Å∫‚Å∫[i,j,n] = 0.0
        end
    end
    nothing
end

@kernel function get_canopy_elem_rt_SFI!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, G, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, ndoubl, wct02, nStokes ,I‚ÇÄ, iŒº0, D)
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    
    i, _, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    FT = eltype(I‚ÇÄ)
    J‚ÇÄ‚Å∫[i, 1, n]=0
    J‚ÇÄ‚Åª[i, 1, n]=0
    n2=1
    if size(Z‚Åª‚Å∫,3)>1
        n2 = n
    end
    
    Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
    Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
    
    for ii = i_start:i_end
        Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫[i,ii,n2] * I‚ÇÄ[ii-i_start+1]
        Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫[i,ii,n2] * I‚ÇÄ[ii-i_start+1] 
    end

    if (i>=i_start) && (i<=i_end)
        ctr = i-i_start+1
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
        # 1.54 in Fell
        J‚ÇÄ‚Å∫[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Å∫‚Å∫_I‚ÇÄ * (G[i] * dœÑ_Œª[n] / Œº[i]) * exp(-dœÑ_Œª[n] *  G[i] / Œº[i])
    else
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
        # 1.53 in Fell; 2.14 in Myneni Book 
        J‚ÇÄ‚Å∫[i, 1, n] = 
        wct02 * œñ_Œª[n]  *  Z‚Å∫‚Å∫_I‚ÇÄ * 
        (Œº[i_start] / (Œº[i]*G[i_start] - Œº[i_start]*G[i])) * 
        (exp(-dœÑ_Œª[n] * G[i] / Œº[i]) - exp(-dœÑ_Œª[n] * G[i_start] / Œº[i_start]))
        #(exp(-dœÑ_Œª[n] * G[i_start] / Œº[i_start]) - exp(-dœÑ_Œª[n] * G[i] / Œº[i]))
    end
    #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]
    # 1.52 in Fell
    J‚ÇÄ‚Åª[i, 1, n] = wct02 * œñ_Œª[n] *  Z‚Åª‚Å∫_I‚ÇÄ * 
            (Œº[i_start] / (Œº[i]*G[i_start] + Œº[i_start]*G[i])) *
            (1 - exp(-dœÑ_Œª[n] * ((G[i] / Œº[i]) + (G[i_start] / Œº[i_start]))))
             
        #(1 - exp(-(dœÑ_Œª[n] * (G[i_start] * Œº[i] + G[i] * Œº[i_start]))/(Œº[i_start] * Œº[i])))
        
    # Multiply with incoming:
    #G is now included in tau_sum already!
    J‚ÇÄ‚Å∫[i, 1, n] *= exp(-œÑ_sum[n]/Œº[i_start])
    J‚ÇÄ‚Åª[i, 1, n] *= exp(-œÑ_sum[n]/Œº[i_start])

    if ndoubl >= 1
        J‚ÇÄ‚Åª[i, 1, n] = D[i,i]*J‚ÇÄ‚Åª[i, 1, n] #D = Diagonal{1,1,-1,-1,...Nquad times}
    end  
    #if (n==840||n==850)    
    #    @show i, n, J‚ÇÄ‚Å∫[i, 1, n], J‚ÇÄ‚Åª[i, 1, n]      
    #end
    nothing
end